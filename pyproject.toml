
[project]
name = "virtualizarr"
description = "Create virtual Zarr stores from archival data using xarray API"
readme = "README.md"
authors = [
    {name = "Thomas Nicholas", email = "tom@cworthy.org"}
]
license = {text = "Apache-2"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10"
dynamic = ["version"]
dependencies = [
    "xarray>=2024.10.0,<2025.0.0",
    "numpy>=2.0.0",
    "packaging",
    "universal-pathlib",
    "numcodecs",
    "ujson",
]

[project.optional-dependencies]
hdf_reader = [
    "fsspec",
    "h5py",
    "hdf5plugin",
    "imagecodecs",
    "imagecodecs-numcodecs==2024.6.1",
    "numcodecs"
]
icechunk = [
    "icechunk==0.1.0a8",
]
test = [
    "codecov",
    "fastparquet",
    "fsspec",
    "h5py",
    "kerchunk>=0.2.5",
    "mypy",
    "netcdf4",
    "numcodecs",
    "pandas-stubs",
    "pooch",
    "pre-commit",
    "pytest-cov",
    "pytest-mypy",
    "pytest",
    "ruff",
    "s3fs",
    "scipy",
    "virtualizarr[hdf_reader]"
]

[project.urls]
Home = "https://github.com/TomNicholas/VirtualiZarr"
Documentation = "https://github.com/TomNicholas/VirtualiZarr/blob/main/README.md"

[build-system]
requires = [
    "setuptools>=61.0.0",
    "wheel",
    "setuptools_scm[toml]>=7.0",
    "check-manifest"
]

[tool.setuptools_scm]
fallback_version = "9999"

[tool.setuptools.packages.find]
exclude = ["docs", "tests", "tests.*", "docs.*"]

[tool.setuptools.package-data]
datatree = ["py.typed"]

[tool.mypy]
files = "virtualizarr/**/*.py"
show_error_codes = true

[[tool.mypy.overrides]]
module = "fsspec.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "numcodecs.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "kerchunk.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "ujson.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "zarr.*"
ignore_missing_imports = true

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4
target-version = "py310"

exclude = [
    "docs",
    ".eggs"
]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "I"]
per-file-ignores = {}

# E402: module level import not at top of file
# E731: do not assign a lambda expression, use a def
# W503: line break before binary operator - not implimeted by ruff due to conflict with PEP8.

ignore = ["E402", "E731"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Indent with spaces, rather than tabs.
indent-style = "space"
# Respect magic trailing commas.
skip-magic-trailing-comma = false
# Automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["virtualizarr"]

[tool.coverage.run]
include = ["virtualizarr/"]
omit = ["conftest.py", "virtualizarr/tests/*"]

[tool.pytest.ini_options]
# See https://pytest-asyncio.readthedocs.io/en/latest/concepts.html#asyncio-event-loops
# Explicitly set asyncio_default_fixture_loop_scope to eliminate the following warning:
#
#    PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope"
#    is unset. The event loop scope for asynchronous fixtures will default to the fixture
#    caching scope. Future versions of pytest-asyncio will default the loop scope for
#    asynchronous fixtures to function scope. Set the default fixture loop scope
#    explicitly in order to avoid unexpected behavior in the future. Valid fixture loop
#    scopes are: "function", "class", "module", "package", "session"
#
asyncio_default_fixture_loop_scope = "session"
markers = [
    # Although we may not use pytest.mark.flaky, some of our test modules import
    # from xarray.tests, and xarray.tests.__init__.py references pytest.mark.flaky.
    # Therefore, without the "flaky" marker below, during test execution, we see
    # this warning: "PytestUnknownMarkWarning: Unknown pytest.mark.flaky"
    "flaky: flaky tests",
    "network: marks test requiring internet (select with '--run-network-tests')",
]
